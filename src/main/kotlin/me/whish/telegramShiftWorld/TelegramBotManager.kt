package me.whish.telegramShiftWorld

import com.google.gson.Gson
import com.google.gson.JsonObject
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.Response
import java.io.IOException
import java.util.concurrent.TimeUnit

class TelegramBotManager(private val plugin: TelegramShiftWorld) {

    private val gson = Gson()
    private val httpClient = OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build()

    private var isRunning = false
    private var updateOffset = 0

    private val botToken: String
        get() = plugin.configManager.getBotToken()

    private val baseUrl: String
        get() = "https://api.telegram.org/bot$botToken"

    fun startBot(): Boolean {
        if (botToken.isEmpty() || botToken.equals("YOUR_BOT_TOKEN_HERE", ignoreCase = true)) {
            plugin.logger.severe("Telegram –±–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return false
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if (!checkBotToken()) {
            plugin.logger.severe("–ù–µ–≤–µ—Ä–Ω—ã–π Telegram –±–æ—Ç —Ç–æ–∫–µ–Ω!")
            return false
        }

        isRunning = true

        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        plugin.server.scheduler.runTaskAsynchronously(plugin, Runnable {
            startPolling()
        })

        plugin.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return true
    }

    fun stopBot() {
        isRunning = false
        plugin.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    private fun checkBotToken(): Boolean {
        return try {
            val request = Request.Builder()
                .url("$baseUrl/getMe")
                .build()

            val response = httpClient.newCall(request).execute()
            val responseBody = response.body?.string() ?: return false

            val jsonResponse = gson.fromJson(responseBody, JsonObject::class.java)
            jsonResponse.get("ok")?.asBoolean == true
        } catch (e: Exception) {
            plugin.logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: ${e.message}")
            false
        }
    }

    private fun startPolling() {
        plugin.debug("–ó–∞–ø—É—â–µ–Ω polling –¥–ª—è Telegram –±–æ—Ç–∞")

        while (isRunning) {
            try {
                val updates = getUpdates()

                for (update in updates) {
                    processUpdate(update)
                    updateOffset = update.get("update_id").asInt + 1
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                Thread.sleep(1000)

            } catch (e: Exception) {
                plugin.logger.severe("–û—à–∏–±–∫–∞ –≤ polling: ${e.message}")
                Thread.sleep(5000) // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }

        plugin.debug("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    private fun getUpdates(): List<JsonObject> {
        val request = Request.Builder()
            .url("$baseUrl/getUpdates?offset=$updateOffset&timeout=30")
            .build()

        val response = httpClient.newCall(request).execute()
        val responseBody = response.body?.string() ?: return emptyList()

        val jsonResponse = gson.fromJson(responseBody, JsonObject::class.java)

        if (jsonResponse.get("ok")?.asBoolean != true) {
            return emptyList()
        }

        val result = jsonResponse.getAsJsonArray("result")
        return result.map { it.asJsonObject }
    }

    private fun processUpdate(update: JsonObject) {
        try {
            if (!update.has("message")) return

            val message = update.getAsJsonObject("message")
            if (!message.has("text")) return

            val text = message.get("text").asString
            val chatId = message.getAsJsonObject("chat").get("id").asLong
            val userId = message.getAsJsonObject("from").get("id").asLong
            val username = if (message.getAsJsonObject("from").has("username")) {
                message.getAsJsonObject("from").get("username").asString
            } else {
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

            plugin.debug("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç $username ($userId): $text")

            when {
                text.startsWith("/start") -> handleStartCommand(chatId, userId, username)
                text.startsWith("/link ") -> handleLinkCommand(chatId, userId, username, text)
                text.startsWith("/help") -> handleHelpCommand(chatId, userId, username)
                text.startsWith("/status") -> handleStatusCommand(chatId, userId, username)
                else -> handleUnknownCommand(chatId, userId, username)
            }

        } catch (e: Exception) {
            plugin.logger.severe("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${e.message}")
        }
    }

    private fun handleStartCommand(chatId: Long, userId: Long, username: String) {
        val linkedUuid = plugin.linkingManager.getTelegramPlayerUuid(userId)

        val message = if (linkedUuid != null) {
            val playerName = plugin.server.getOfflinePlayer(linkedUuid).name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            """
            üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            
            ‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **$playerName**
            
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
            /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
            """.trimIndent()
        } else {
            """
            üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤!
            
            ‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
            
            üéÆ –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:
            1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ (–≤–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º)
            3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /link –í–ê–®_–ö–û–î
            
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
            /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
            """.trimIndent()
        }

        sendMessage(chatId, message)
    }

    private fun handleLinkCommand(chatId: Long, userId: Long, username: String, text: String) {
        val parts = text.split(" ")
        if (parts.size != 2) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /link –í–ê–®_–ö–û–î")
            return
        }

        val code = parts[1].uppercase()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        val existingUuid = plugin.linkingManager.getTelegramPlayerUuid(userId)
        if (existingUuid != null) {
            val playerName = plugin.server.getOfflinePlayer(existingUuid).name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            sendMessage(chatId, "‚ö†Ô∏è –í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **$playerName**")
            return
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
        plugin.server.scheduler.runTask(plugin, Runnable {
            val success = plugin.linkingManager.verifyCode(code, userId)

            plugin.server.scheduler.runTaskAsynchronously(plugin, Runnable {
                if (success) {
                    val playerUuid = plugin.linkingManager.getTelegramPlayerUuid(userId)
                    val playerName = if (playerUuid != null) {
                        plugin.server.getOfflinePlayer(playerUuid).name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    } else {
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    }

                    sendMessage(chatId, """
                        ‚úÖ **–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!**
                        
                        üéÆ –í–∞—à Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **$playerName**
                        
                        –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
                    """.trimIndent())

                    plugin.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username ($userId) –ø—Ä–∏–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞ $playerName")
                } else {
                    sendMessage(chatId, """
                        ‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥!**
                        
                        üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
                        1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
                        3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /link –ù–û–í–´–ô_–ö–û–î
                    """.trimIndent())
                }
            })
        })
    }

    private fun handleHelpCommand(chatId: Long, userId: Long, username: String) {
        val message = """
        ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**
        
        üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
        /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        /link –ö–û–î - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–¥—É
        /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
        /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
        
        üéÆ **–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**
        1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        2. –í–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º –ø—Ä–∏–≤—è–∑–∫–∏
        3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: /link –í–ê–®_–ö–û–î
        4. –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
        
        ‚ö†Ô∏è –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç!
        """.trimIndent()

        sendMessage(chatId, message)
    }

    private fun handleStatusCommand(chatId: Long, userId: Long, username: String) {
        val linkedUuid = plugin.linkingManager.getTelegramPlayerUuid(userId)

        val message = if (linkedUuid != null) {
            val offlinePlayer = plugin.server.getOfflinePlayer(linkedUuid)
            val playerName = offlinePlayer.name ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            val isOnline = plugin.server.getPlayer(linkedUuid) != null
            val onlineStatus = if (isOnline) "üü¢ –í —Å–µ—Ç–∏" else "üî¥ –ù–µ –≤ —Å–µ—Ç–∏"

            """
            ‚úÖ **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ê–∫—Ç–∏–≤–Ω–∞**
            
            üéÆ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫: **$playerName**
            üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞: $onlineStatus
            üÜî UUID: `${linkedUuid}`
            """.trimIndent()
        } else {
            """
            ‚ùå **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω**
            
            üéÆ –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
            
            –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
            """.trimIndent()
        }

        sendMessage(chatId, message)
    }

    private fun handleUnknownCommand(chatId: Long, userId: Long, username: String) {
        sendMessage(chatId, """
            ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!
            
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        """.trimIndent())
    }

    fun sendMessage(chatId: Long, text: String) {
        try {
            val json = JsonObject().apply {
                addProperty("chat_id", chatId)
                addProperty("text", text)
                addProperty("parse_mode", "Markdown")
            }

            val mediaType = "application/json; charset=utf-8".toMediaType()
            val requestBody = gson.toJson(json).toRequestBody(mediaType)

            val request = Request.Builder()
                .url("$baseUrl/sendMessage")
                .post(requestBody)
                .build()

            httpClient.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    plugin.logger.severe("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${e.message}")
                }

                override fun onResponse(call: Call, response: Response) {
                    if (!response.isSuccessful) {
                        plugin.logger.warning("Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.code}")
                    }
                    response.close()
                }
            })

        } catch (e: Exception) {
            plugin.logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
        }
    }
}